<?php

namespace App\Http\Controllers;

use App\Models\Batch;
use App\Models\Course;
use App\Models\Department;
use App\Models\Lecturer;
use App\Models\Module;
use App\Models\Staff;
use App\Models\Student;
use App\Models\User;
use Illuminate\Http\Request;

class UniversityController extends Controller
{
    // Methods for handling requests related to batches
    public function indexBatches()
    {
        $batches = Batch::all();
        return view('batches.index', compact('batches'));
    }

    public function createBatch()
    {
        return view('batches.create');
    }

    public function storeBatch(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
        ]);

        Batch::create($request->all());
        return redirect()->route('batches.index');
    }

    // Methods for handling requests related to courses
    public function indexCourses()
    {
        $courses = Course::all();
        return view('courses.index', compact('courses'));
    }

    public function createCourse()
    {
        return view('courses.create');
    }

    public function storeCourse(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'duration' => 'required|integer',
            'fee' => 'required|numeric',
            'is_online' => 'required|boolean',
        ]);

        Course::create($request->all());
        return redirect()->route('courses.index');
    }

    // Methods for handling requests related to departments
    public function indexDepartments()
    {
        $departments = Department::all();
        return view('departments.index', compact('departments'));
    }

    public function createDepartment()
    {
        return view('departments.create');
    }

    public function storeDepartment(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
        ]);

        Department::create($request->all());
        return redirect()->route('departments.index');
    }

    // Methods for handling requests related to lecturers
    public function indexLecturers()
    {
        $lecturers = Lecturer::all();
        return view('lecturers.index', compact('lecturers'));
    }

    public function createLecturer()
    {
        return view('lecturers.create');
    }

    public function storeLecturer(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email',
            'address' => 'nullable|string',
            'phone_number' => 'nullable|string',
            'position' => 'nullable|string',
            'department_id' => 'required|exists:departments,id',
            'salary' => 'required|numeric',
        ]);

        Lecturer::create($request->all());
        return redirect()->route('lecturers.index');
    }

    // Methods for handling requests related to modules
    public function indexModules()
    {
        $modules = Module::all();
        return view('modules.index', compact('modules'));
    }

    public function createModule()
    {
        return view('modules.create');
    }

    public function storeModule(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'credits' => 'required|integer',
            'course_id' => 'required|exists:courses,id',
        ]);

        Module::create($request->all());
        return redirect()->route('modules.index');
    }

    // Methods for handling requests related to staff
    public function indexStaff()
    {
        $staff = Staff::all();
        return view('staff.index', compact('staff'));
    }

    public function createStaff()
    {
        return view('staff.create');
    }

    public function storeStaff(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email',
            'address' => 'nullable|string',
            'phone_number' => 'nullable|string',
            'salary' => 'required|numeric',
            'department_id' => 'required|exists:departments,id',
        ]);

        Staff::create($request->all());
        return redirect()->route('staff.index');
    }

    // Methods for handling requests related to students
    public function indexStudents()
    {
        $students = Student::all();
        return view('students.index', compact('students'));
    }

    public function createStudent()
    {
        return view('students.create');
    }

    public function storeStudent(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email',
            'address' => 'nullable|string',
            'phone_number' => 'nullable|string',
            'batch_id' => 'required|exists:batches,id',
        ]);

        Student::create($request->all());
        return redirect()->route('students.index');
    }

    // Methods for handling requests related to users
    public function indexUsers()
    {
        $users = User::all();
        return view('users.index', compact('users'));
    }

    public function createUser()
    {
        return view('users.create');
    }

    public function storeUser(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|string|min:8|confirmed',
        ]);

        User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => bcrypt($request->password),
        ]);

        return redirect()->route('users.index');
    }
}